Pseudo Code:

    1. Initialize two pointers: slow and fast, 
       both pointing to the head of the list.

    2. Start a while loop that continues until both fast is null
       and the next node of fast is null:

          a. Move slow one step ahead (i.e., slow = slow.next).

          b. Move fast two steps ahead (i.e., fast = fast.next.next).

          c. Check if slow is equal to fast. If they are equal,
             it means the list has a loop, so return true.

    3. If the while loop ends without finding a loop, return false.



This algorithm uses the slow and fast pointer technique 
(also known as Floyd's Tortoise and Hare algorithm) to efficiently
detect the presence of a loop in the linked list.
